import { WakSelection } from './wakSelection';
export declare class WakDataSource {
    name: any;
    classname: any;
    filterAttributes: any;
    restApi: any;
    attributes: any;
    collectionName: any;
    key: any;
    dataURI: any;
    pageSize: any;
    timeout: any;
    savedQueryString: any;
    multiSelect: any;
    savedOrderby: any;
    eventListener: any[];
    eventListenerID: any[];
    eventListenerCount: any;
    requests: any[];
    collection: any;
    entity: any;
    selection: WakSelection;
    methods: any;
    collectionMethods: any;
    entityMethods: any;
    classMethods: any;
    constructor(restApi: any, sourceConfig: any);
    __queueRequest(callBack: any, atOnce?: any): void;
    __stopAllRequest(): void;
    getSelection(): any;
    resetCurrentEntity(): void;
    length(): number;
    addEventListener(fn: any): any;
    removeEventListener(id: any): boolean;
    __triggerEvent(event: any): void;
    all(options: any): Promise<{}>;
    releaseEntitySet(entitySetUrl: any, options?: any): void;
    query(queryString: string, options?: any): Promise<{}>;
    replaceCollection(collection: any, releaseOldEntityset: any): void;
    buildFromSelection(sel: any, options: any): Promise<{}>;
    select(row: any): Promise<{}>;
    getElement(row: any, options?: any, overrideCache?: any): Promise<{}>;
    orderby(orderByArray: any, options: any): Promise<{}>;
    clearCache(row: any): Promise<{}>;
    addNewElement(): void;
    __guid(): string;
    saveCurrent(entityObject: any, options: any): Promise<{}>;
    refreshCurrent(entityObject: any, options: any): Promise<{}>;
    resetCollection(): void;
    saveAll(options: any): Promise<{}>;
    deleteCurrent(options: any): Promise<{}>;
}
